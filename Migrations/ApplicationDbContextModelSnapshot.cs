// <auto-generated />
using System;
using Asset_Management_Sciforn.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Asset_Management_Sciforn.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Asset_Management_Sciforn.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetConditionId")
                        .HasColumnType("int");

                    b.Property<int>("AssetStatusId")
                        .HasColumnType("int");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsSpare")
                        .HasColumnType("bit");

                    b.Property<string>("MakeModel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specifications")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("WarrantyExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetConditionId");

                    b.HasIndex("AssetStatusId");

                    b.ToTable("Asset");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssetConditionId = 1,
                            AssetStatusId = 1,
                            AssetType = "Laptop",
                            IsSpare = false,
                            MakeModel = "Latitude 7420",
                            Name = "Dell Latitude Laptop",
                            PurchaseDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "DL7420X123",
                            Specifications = "Intel i7, 16GB RAM, 512GB SSD",
                            WarrantyExpiryDate = new DateTime(2026, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AssetConditionId = 2,
                            AssetStatusId = 2,
                            AssetType = "Desktop",
                            IsSpare = false,
                            MakeModel = "ProDesk 400 G7",
                            Name = "HP ProDesk Desktop",
                            PurchaseDate = new DateTime(2022, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "HP400G7X456",
                            Specifications = "Intel i5, 8GB RAM, 1TB HDD",
                            WarrantyExpiryDate = new DateTime(2025, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AssetConditionId = 3,
                            AssetStatusId = 3,
                            AssetType = "Projector",
                            IsSpare = false,
                            MakeModel = "EB-X41",
                            Name = "Epson Projector",
                            PurchaseDate = new DateTime(2021, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "EPX41Y789",
                            Specifications = "XGA, 3600 Lumens",
                            WarrantyExpiryDate = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AssetConditionId = 4,
                            AssetStatusId = 4,
                            AssetType = "Networking",
                            IsSpare = false,
                            MakeModel = "RV340",
                            Name = "Cisco Router",
                            PurchaseDate = new DateTime(2020, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "CISR340Z101",
                            Specifications = "Dual WAN, Gigabit Ethernet",
                            WarrantyExpiryDate = new DateTime(2023, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AssetConditionId = 1,
                            AssetStatusId = 1,
                            AssetType = "Peripheral",
                            IsSpare = true,
                            MakeModel = "MX Master 3",
                            Name = "Logitech Mouse",
                            PurchaseDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "LOGMX30012",
                            Specifications = "Wireless, Rechargeable",
                            WarrantyExpiryDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AssetConditionId = 1,
                            AssetStatusId = 2,
                            AssetType = "Laptop",
                            IsSpare = false,
                            MakeModel = "MacBook Pro 14",
                            Name = "Apple MacBook Pro",
                            PurchaseDate = new DateTime(2024, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "MBP14X999",
                            Specifications = "M2 Pro, 16GB RAM, 1TB SSD",
                            WarrantyExpiryDate = new DateTime(2027, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AssetConditionId = 2,
                            AssetStatusId = 1,
                            AssetType = "Monitor",
                            IsSpare = true,
                            MakeModel = "S24R350",
                            Name = "Samsung Monitor",
                            PurchaseDate = new DateTime(2022, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "SAMON24123",
                            Specifications = "24-inch, Full HD, LED",
                            WarrantyExpiryDate = new DateTime(2025, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AssetConditionId = 3,
                            AssetStatusId = 3,
                            AssetType = "Printer",
                            IsSpare = false,
                            MakeModel = "MFP M227fdw",
                            Name = "HP LaserJet Printer",
                            PurchaseDate = new DateTime(2021, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "HP227X321",
                            Specifications = "Laser, Duplex, Wireless",
                            WarrantyExpiryDate = new DateTime(2024, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AssetConditionId = 4,
                            AssetStatusId = 4,
                            AssetType = "Laptop",
                            IsSpare = false,
                            MakeModel = "ThinkPad X1",
                            Name = "Lenovo ThinkPad Laptop",
                            PurchaseDate = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "LTPX11234",
                            Specifications = "Intel i7, 16GB RAM, 512GB SSD",
                            WarrantyExpiryDate = new DateTime(2023, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AssetConditionId = 1,
                            AssetStatusId = 2,
                            AssetType = "Tablet",
                            IsSpare = false,
                            MakeModel = "iPad Air 5",
                            Name = "Apple iPad",
                            PurchaseDate = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "IPAD5X678",
                            Specifications = "10.9-inch, 256GB, Wi-Fi",
                            WarrantyExpiryDate = new DateTime(2026, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AssetConditionId = 2,
                            AssetStatusId = 1,
                            AssetType = "Accessory",
                            IsSpare = true,
                            MakeModel = "WD19",
                            Name = "Dell Docking Station",
                            PurchaseDate = new DateTime(2023, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SerialNumber = "DELD19X890",
                            Specifications = "USB-C, Multiple Ports",
                            WarrantyExpiryDate = new DateTime(2025, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.AssetAssigned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AssetAssigned");
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.AssetCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AssetCondition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConditionName = "New"
                        },
                        new
                        {
                            Id = 2,
                            ConditionName = "Good"
                        },
                        new
                        {
                            Id = 3,
                            ConditionName = "Needs Repair"
                        },
                        new
                        {
                            Id = 4,
                            ConditionName = "Damaged"
                        });
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.AssetStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AssetStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Assigned"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Under Repair"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "Retired"
                        });
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Designation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department = "IT",
                            Designation = "Software Engineer",
                            Email = "alice.johnson@example.com",
                            FullName = "Alice Johnson",
                            IsActive = true,
                            PhoneNumber = "9876543210"
                        },
                        new
                        {
                            Id = 2,
                            Department = "Finance",
                            Designation = "Accountant",
                            Email = "bob.smith@example.com",
                            FullName = "Bob Smith",
                            IsActive = true,
                            PhoneNumber = "9876543211"
                        },
                        new
                        {
                            Id = 3,
                            Department = "HR",
                            Designation = "HR Manager",
                            Email = "carol.davis@example.com",
                            FullName = "Carol Davis",
                            IsActive = true,
                            PhoneNumber = "9876543212"
                        },
                        new
                        {
                            Id = 4,
                            Department = "IT",
                            Designation = "System Administrator",
                            Email = "david.brown@example.com",
                            FullName = "David Brown",
                            IsActive = true,
                            PhoneNumber = "9876543213"
                        },
                        new
                        {
                            Id = 5,
                            Department = "Operations",
                            Designation = "Operations Manager",
                            Email = "eva.wilson@example.com",
                            FullName = "Eva Wilson",
                            IsActive = true,
                            PhoneNumber = "9876543214"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.Asset", b =>
                {
                    b.HasOne("Asset_Management_Sciforn.Data.AssetCondition", "AssetCondition")
                        .WithMany()
                        .HasForeignKey("AssetConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asset_Management_Sciforn.Data.AssetStatus", "AssetStatus")
                        .WithMany()
                        .HasForeignKey("AssetStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetCondition");

                    b.Navigation("AssetStatus");
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.AssetAssigned", b =>
                {
                    b.HasOne("Asset_Management_Sciforn.Data.Asset", "Asset")
                        .WithMany("AssetAssignments")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asset_Management_Sciforn.Data.Employee", "Employee")
                        .WithMany("AssetAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Asset_Management_Sciforn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Asset_Management_Sciforn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asset_Management_Sciforn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Asset_Management_Sciforn.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.Asset", b =>
                {
                    b.Navigation("AssetAssignments");
                });

            modelBuilder.Entity("Asset_Management_Sciforn.Data.Employee", b =>
                {
                    b.Navigation("AssetAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
