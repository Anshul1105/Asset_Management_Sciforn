@page "/employee"
@using System.Globalization
@using System.Text.Json
@using Asset_Management_Sciforn.Data
@using Asset_Management_Sciforn.Components.Shared
@using Asset_Management_Sciforn.Repository.IRepository
@using Asset_Management_Sciforn.Services.Extensions
@using Microsoft.AspNetCore.Authorization

@inject IEmployeeRepository _employeeRepository
@inject IJSRuntime _JS


<BsModal OnModalConfirmation="ConfirmDeleteClick" ButtonBootStrapStyle="btn-danger" ButtonText="Delete"
    Title="Are you sure you want to delete this Employee"></BsModal>


@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="py-2 text-white">Employee List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/employee/create" class="btn btn-lg btn-secondary" style="width:250px">
                        <i class="bi bi-plus-square-fill"></i> Add new Employee
                    </a>
                </div>
            </div>
            @if (Employees.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Full Name</th>
                            <th>Department</th>
                            <th>Designation</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Is Active?</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var emp in Employees)
                        {
                            <tr>
                                <td>@emp.FullName</td>
                                <td>@emp.Department</td>
                                <td>@emp.Designation</td>
                                <td>@emp.Email</td>
                                <td>@emp.PhoneNumber</td>
                                <td>
                                    @if (emp.IsActive)
                                    {
                                        <span>Yes</span>
                                    }
                                    else
                                    {
                                        <span>No</span>
                                    }
                                </td>

                                <td>
                                    <a href="@($"/employee/update/{emp.Id}")" class="btn btn-primary"><i
                                            class="bi bi-pencil-square"></i> Edit </a>
                                    <button class="btn btn-danger" @onclick="() => HandleDelete(emp.Id)"><i
                                            class="bi bi-trash3-fill"></i> Delete </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}


@code {

    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Employee> Employees { get; set; } = new List<Employee>();
    private int DeleteEmployeeId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadEmployees();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadEmployees()
    {
        Employees = await _employeeRepository.GetAllAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteEmployeeId = id;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDeleteClick(bool isConfirmed)
    {
        IsProcessing = true;
        await _JS.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeleteEmployeeId != 0)
        {
            var result = await _employeeRepository.DeleteAsync(DeleteEmployeeId);
            if (result)
                _JS?.ToastrSuccess("Employee Deleted Successfully");
            else
                _JS?.ToastrError("Employee Deletion Failed. Please try again later.");

            await LoadEmployees();

        }

        DeleteEmployeeId = 0;
        IsProcessing = false;
    }

}